name: Build, Test and Analyze (React & .NET)

# Define variables available to all jobs in the workflow
env:
  FRONTEND_DIR: ./src/nimblist/Nimblist.Frontend                # Directory for React app
  DOTNET_DIR: ./src/nimblist                        # Directory containing .sln (use '.' if root, or e.g., ./backend)
  DOTNET_SLN: nimblist.sln           # Name of the .NET solution file
  # Define full report paths relative to the repository root
  FRONTEND_COVERAGE_PATH: ./src/nimblist/Nimblist.Frontend/coverage/lcov.info
  DOTNET_COVERAGE_PATH: ./src/nimblist/Nimblist.test/TestResults/Coverage/coverage.opencover.xml # Adjust if DOTNET_DIR is not root or output changes
  VITE_API_BASE_URL: https://localhost:64213
  # --- SonarQube Configuration (Non-Secret) ---
  SONAR_PROJECT_KEY: "tmnrtn_nimblist"     # <-- ADD THIS (Replace with actual value)
  SONAR_ORGANIZATION: "tmnrtn" # <-- ADD THIS (Replace with actual value)
  SONAR_HOST_URL: "https://sonarcloud.io"   

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_test_analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest
    # Variables defined here override workflow env vars or add job-specific ones
    # env:
    #   MY_JOB_VAR: value

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Node.js/React Setup & Test ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json # Use variable

      - name: Install Node dependencies
        run: npm ci
        working-directory: ${{ env.FRONTEND_DIR }} # Use variable

      - name: Run React Linters (Optional)
        run: npm run lint
        working-directory: ${{ env.FRONTEND_DIR }} # Use variable

      - name: Run React unit tests and generate coverage report
        run: npm run test:coverage # Assumes output is coverage/lcov.info inside working dir
        working-directory: ${{ env.FRONTEND_DIR }} # Use variable

      # --- .NET Setup & Test ---
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.DOTNET_SLN }}
        working-directory: ${{ env.DOTNET_DIR }} # Use variable (often '.' for root)

              # 1. Install the .NET Sonar Scanner tool
      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      # 2. Begin SonarScanner analysis (BEFORE build/test)
      - name: Begin SonarQube Scan
        # Run from the directory containing the solution or where scan should start
        working-directory: ${{ env.DOTNET_DIR }}
        run: |
          dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /o:"${{ env.SONAR_ORGANIZATION }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.test.inclusions="**/*.test.js,**/*.test.jsx,**/*.test.ts,**/*.test.tsx,**/*Tests.cs" /d:sonar.exclusions="**/obj/**,**/bin/**,${{ env.FRONTEND_DIR }}/node_modules/**,**/*.Generated.cs,**/nimblist.data/Migrations/**" /d:sonar.javascript.lcov.reportPaths="${{ github.workspace }}/${{ env.FRONTEND_COVERAGE_PATH }}" /d:sonar.cs.opencover.reportsPaths="${{ github.workspace }}/${{ env.DOTNET_COVERAGE_PATH }}"

      # 3. Build the solution (AFTER scanner begin)
      #    The scanner integrates with the build to perform analysis.
      - name: Build .NET solution
        run: dotnet build ${{ env.DOTNET_SLN }} --configuration Release --no-restore
        working-directory: ${{ env.DOTNET_DIR }}

      # 4. Run tests (AFTER scanner begin, usually AFTER build)
      #    This generates the coverage report needed by the scanner end step.
      - name: Run .NET tests and generate coverage report
        run: >
          dotnet test ${{ env.DOTNET_SLN }} --no-build --configuration Release -p:CollectCoverage=true -p:CoverletOutputFormat=opencover -p:CoverletOutput=${{ github.workspace }}/${{ env.DOTNET_COVERAGE_PATH }}
        working-directory: ${{ env.DOTNET_DIR }}

      # 5. End SonarScanner analysis (AFTER build/test)
      - name: End SonarQube Scan
        # Needs to run from the same directory as 'begin' or have access to build info
        working-directory: ${{ env.DOTNET_DIR }}
        env:
          # Pass token securely, sonarscanner end picks it up from this env var
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"


