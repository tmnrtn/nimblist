services:
  Nimblist.api:
    image: ${DOCKER_REGISTRY-}nimblistapi
    build:
      context: .
      dockerfile: Nimblist.api/Dockerfile
    environment:
      # Use variable substitution for secrets from .env file (see step 2)
      - ConnectionStrings__DefaultConnection=Host=nimblist_db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__Redis=${ConnectionStrings__Redis}
      - FrontendAppSettings__BaseUrl=${FRONTEND_APP_SETTINGS__BASE_URL}
    depends_on:
      - Nimblist.db # Make the API service depend on the database service
    networks: # Optional but recommended: define explicit network
      - nimblistnet
    volumes:
      # Mount the named volume to a path inside the container, e.g., /keys
      - dataprotection_keys:/keys
    ports:
      # Optional: Expose Postgres port to host ONLY if you need external access (e.g., pgAdmin)
      # Map host port 5433 to container port 5432 to avoid conflicts if you have local Postgres running
      - "64212:8080"
      - "64213:8081"
    user: root 
  Nimblist.classification:
    image: ${DOCKER_REGISTRY-}nimblistclassification
    build:
      context: ./Nimblist.classification # Adjust path to your classification service
      dockerfile: ./Dockerfile
    ports:
      - "5000:5000"
    networks: # Optional but recommended: define explicit network
      - nimblistnet
  Nimblist.db:
    image: postgres # Use a specific version or 'latest'
    container_name: nimblist_db
    restart: unless-stopped # Ensure DB restarts if stopped unexpectedly
    environment:
      # These are consumed by the postgres image on first run to initialize the DB
      # Use variable substitution to get values from the .env file
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Mount a named volume for data persistence - CRITICAL!
    ports:
      # Optional: Expose Postgres port to host ONLY if you need external access (e.g., pgAdmin)
      # Map host port 5433 to container port 5432 to avoid conflicts if you have local Postgres running
      - "5433:5432"
    networks: # Connect to the same network as the API
      - nimblistnet
    # Optional: Add a healthcheck to wait until Postgres is ready accepting connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis_cache: # Or just 'redis' - the service name used in connection strings
    image: redis:alpine # Use alpine for smaller image size
    container_name: nimblist_redis # Optional fixed name
    restart: unless-stopped
    # Optional: Add a volume if you want Redis data to persist restarts
    # volumes:
    #   - redis_data:/data
    # ports:
      # Optional: Expose port to host ONLY if needed for external debugging/tools
      # - "6379:6379"
    networks:
      - nimblistnet # Ensure it's on the same network as your API

# Define the named volume for persistent PostgreSQL data
volumes:
  postgres_data: # The name used in the db service's volume mapping
  dataprotection_keys: # Define the named volume

# Define the custom network (optional but good practice)
networks:
  nimblistnet:
    driver: bridge