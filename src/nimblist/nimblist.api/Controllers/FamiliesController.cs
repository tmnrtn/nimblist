using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Nimblist.api.DTO; // Your DTO namespace
using Nimblist.Data;     // Your DbContext namespace
using Nimblist.Data.Models; // Your Models namespace

namespace Nimblist.api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class FamiliesController : ControllerBase
    {
        private readonly NimblistContext _context;

        public FamiliesController(NimblistContext context)
        {
            _context = context;
        }

        // GET: api/Families
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Family>>> GetFamilies()
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User ID claim not found.");
            }

            var families = await _context.Families
                                        .Where(f => f.UserId == userId) // Families created by the user
                                        .Include(f => f.Members) // Include members of the family
                                            .ThenInclude(fm => fm.User) // Include the User object for each member
                                        .OrderBy(f => f.Name)
                                        .ToListAsync();
            // Note: Including fm.User will serialize ApplicationUser objects.
            // Ensure your ApplicationUser model doesn't expose sensitive data or use a DTO for members if needed.
            // The ReferenceHandler.IgnoreCycles in Program.cs should prevent serialization issues.

            return Ok(families);
        }

        // GET: api/Families/{id}
        [HttpGet("{id}")]
        public async Task<ActionResult<Family>> GetFamily(Guid id)
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User ID claim not found.");
            }

            var family = await _context.Families
                                    .Include(f => f.Members)
                                        .ThenInclude(fm => fm.User)
                                    .FirstOrDefaultAsync(f => f.Id == id && f.UserId == userId); //

            if (family == null)
            {
                // Return NotFound - don't reveal if the family exists but belongs to someone else
                return NotFound();
            }

            return Ok(family);
        }

        // POST: api/Families
        [HttpPost]
        public async Task<ActionResult<Family>> PostFamily(FamilyInputDto familyDto)
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User ID claim not found.");
            }

            var family = new Family
            {
                Name = familyDto.Name,
                UserId = userId // Set the creator of the family
                // Id is Guid, generated by EF Core or database
            };

            _context.Families.Add(family);
            await _context.SaveChangesAsync(); // Save family to get its Id

            // Automatically add the creator as a member of the family
            var familyMember = new FamilyMember
            {
                FamilyId = family.Id,
                UserId = userId
                // Optionally, add a default role here if your FamilyMember model supports it
            };
            _context.FamilyMembers.Add(familyMember);
            await _context.SaveChangesAsync(); // Save the family member association

            // Fetch the created family with its members to return in the response
            var createdFamilyWithMembers = await _context.Families
                                                .Include(f => f.Members)
                                                    .ThenInclude(fm => fm.User)
                                                .FirstOrDefaultAsync(f => f.Id == family.Id);

            return CreatedAtAction(nameof(GetFamily), new { id = family.Id }, createdFamilyWithMembers ?? family);
        }

        // PUT: api/Families/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> PutFamily(Guid id, FamilyUpdateDto familyDto)
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User ID claim not found.");
            }

            var existingFamily = await _context.Families
                                            .FirstOrDefaultAsync(f => f.Id == id && f.UserId == userId); //

            if (existingFamily == null)
            {
                return NotFound(); // Not found or doesn't belong to the user
            }

            existingFamily.Name = familyDto.Name;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!await FamilyExists(id, userId))
                {
                    return NotFound();
                }
                else
                {
                    // Log conflict or return specific error
                    return Conflict("The family was modified by another user. Please refresh and try again.");
                }
            }

            return NoContent(); // Success
        }

        // DELETE: api/Families/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteFamily(Guid id)
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized("User ID claim not found.");
            }

            var family = await _context.Families
                                    .FirstOrDefaultAsync(f => f.Id == id && f.UserId == userId); //

            if (family == null)
            {
                return NotFound(); // Not found or doesn't belong to the user
            }

            // Cascading delete for FamilyMembers and ListShares associated with this Family
            // is configured in NimblistContext.OnModelCreating
            _context.Families.Remove(family);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private async Task<bool> FamilyExists(Guid id, string userId)
        {
            return await _context.Families.AnyAsync(e => e.Id == id && e.UserId == userId); //
        }
    }
}